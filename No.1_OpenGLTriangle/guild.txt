EGL Guild:
http://stackoverflow.com/questions/19212145/egl-guide-for-beginers

https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglIntro.xhtml


void glClearColor(GLfloat red,
 	GLfloat green,
 	GLfloat blue,
 	GLfloat alpha);

指定为颜色缓冲区设置的值。

为颜色缓冲区预设值。当调用 glClear 清除颜色缓冲区时，

当颜色缓冲区清除的时候，指定 Red、Green、Blue 和 Alpha 通道值。初始化状态所有通道的值为 0；

====================================

void glClear(GLbitfield mask);

将颜色缓冲区清除为预设的值；

`mask` - 用来标识需要被清除的缓冲区。可以是如下三个缓冲区的组合：
GL_COLOR_BUFFER_BIT、GL_DEPTH_BUFFER_BIT 和 GL_STENCIL_BUFFER_BIT；

描述：
glClear 设置窗口位平面区域的值为 —— 前面通过 glClearColor、glClearDepthf 和 glClearStencil
预设的值，可以同时对多个颜色缓冲区进行清除。

包含一个参数，它可以是下面值的组合，用来表示那个缓冲区将被清除：

GL_COLOR_BUFFER_BIT - 

如果缓冲区不存在，则针对该缓冲区的 glClear 不起作用。

====================================

GLuint glCreateShader(GLenum shaderType);

创建一个着色器对象。着色器对象用来维护源代码字符串，定义为着色器。

`shaderType` - 指定创建的着色器对象的类型。可以是：
支持三种不同类型的着色器：
GL_VERTEX_SHADER, GL_FRAGMENT_SHADER, or GL_COMPUTE_SHADER；

GL_VERTEX_SHADER —— 着色器，用于运行在可编程的顶点处理器；
GL_FRAGMENT_SHADER —— 着色器，用于运行在可编程的片段处理器；
GL_COMPUTE_SHADER —— 着色器，用于运行在可编程的运算处理器；

GL_COMPUTE_SHADER 在 GL 3.1 或之上的版本才支持；

创建着色器对象发生错误时，返回 0；

====================================

void glShaderSource(GLuint shader,
 	GLsizei count,
 	const GLchar **string,
 	const GLint *length);


替换着色器对象对应的源代码。

- shader：指定着色器对象的句柄，它的源代码将被替换；
- count：指定 `string` 和 `length` 数组中元素个数；
- string：指定一个指针数组，指针指向字符串，字符串包含需要被加载到着色
器中的源代码；
- length：指定字符串长度的数组；（指定一个数组，数组中每个元素对应字符串的长度）

源代码字符串在这时候不会扫描或解析，它们只是简单的拷贝到着色器对象。

描述

glShaderSource 将着色器 `shader` 的源代码为 `string` 指定的字符串数组。
任何之前存储到着色器对象的源代码被替换掉。数组中的字符串个数通过 `count` 来指定。
如果 `length` 是 NULL，每个字符串被认为是以 null 结尾。如果 `length` 是一个指定
的值而不是 null，它指向一个数组，数组中的每个元素是一个字符串长度，字符串对应到
`string`。`length`数组中的每个元素包含对应字符串的长度（null 字符不包含在字符串
的长度中），如果字符串的长度小于 0，则表示该字符串以 null 结尾。


注意：当 glShaderSource 函数被调用的时候，GL 拷贝着色器源代码字符串，所以在该函数返回后，
应用程序可以立即释放他的源代码字符串拷贝。

====================================

void glCompileShader(GLuint shader);

编译着色器对象。

`shader` - 指定需要被编译的着色器对象；

[描述]
编译源代码字符串，字符串存放在由 `shader` 指定的着色器对象中。

编译状态的存放作为着色器对象状态的一部分。如果着色器编译过程中没有出现错误，该值
将设置为 GL_TRUE，否则将设置为 GL_FALSE。可以通过传递 GL_COMPILE_STATUS 参数调
用 glGetShaderiv 来查询状态值。

对着色器的编译可能会由于多种原因导致失败，这在 OpenGL ES Shading Language 规范
中指定。不管编译是否成功，通过调用 glGetShaderInfoLog 函数可以获取关于着色器对象
关于编译时候的日志信息。

====================================

void glGetShaderiv(GLuint shader,
 	GLenum pname,
 	GLint *params);

从着色器对象返回一个参数。

- shader：指定需要被查询的着色器对象；
- pname：指定对象参数。下面是可以接受的符号名：GL_SHADER_TYPE, GL_DELETE_STATUS, 
GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.

- params：返回请求对象的参数（用来接收值）；

描述

params - 在 params 中，返回指定着色器对象参数的值，定义了下面的这些参数：

GL_SHADER_TYPE，着色器的类型。如果 `shader` 是顶点着色器对象，返回 GL_VERTEX_SHADER；如果
`shader` 是片段着色器对象，返回 GL_FRAGMENT_SHADER；

GL_DELETE_STATUS，如果 `shader` 当前标记为删除，返回 GL_TRUE，否则返回 GL_FALSE；
GL_COMPILE_STATUS，如果在 `shader` 上最后一次编译操作执行成功，params 返回 GL_TRUE，否则返回 GL_FALSE；
GL_INFO_LOG_LENGTH，params 返回 `shader` 中信息日志的字符数目，包括 null 结尾的字符（例如，用来存放信息
日志的字符缓冲区的大小）。如果 `shader` 没有信息日志，返回 0；

GL_SHADER_SOURCE_LENGTH，返回原字符串串联的长度，组成着色器 `shader` 的源代码，包括以 null 结尾的字符。
如果不存在源代码，返回 0。

注意：如果产生错误，将不会对 `params` 参数进行修改。

====================================

void glGetShaderInfoLog(GLuint shader,
 	GLsizei maxLength,
 	GLsizei *length,
 	GLchar *infoLog);

返回着色器对象的信息日志。

`shader` - 指定着色器对象，将要查询它的信息日志；
`maxLength` - 指定字符缓冲区的大小，用来存放返回的信息日志；
`length` - 存放返回到 `infoLog` 中的字符串长度；
`infoLog` - 指定一个字符数组，用来存放返回的信息日志；

[描述]
glGetShaderInfoLog 返回指定着色器对象的信息日志。当着色器编译时，着色器对象的信息日志被修改。
返回的字符串将以 null 结尾。

glGetShaderInfoLog 在 `infoLog` 中尽量多的返回信息日志，直到最多达到 `maxLength` 个字符。
实际返回的字符数目在 `length` 中指定，不包括 null 结尾字符。如果不需要返回字符串的长度，可以
传递 NULL 给 `length` 参数。要求用来存放返回日志信息的缓冲区大小可以通过调用 glGetShaderiv
的同时传递 GL_INFO_LOG_LENGTH 来获取。

着色器对象的信息日志是字符串，它们可能包含诊断信息，警告信息和其它关于最后一个编译的信息。当
创建着色器对象时，它的信息日志的字符串长度将置为 0；

注意
着色器对象的信息日志，OpenGL 实现者主要用来传递关于编译过程的信息。因此，信息日志在开发过程中，
对应应用开发人员来说非常有用，即使已经成功编译。应用程序开发人员不应该期望不同的 OpenGL 实现
生成相同的日志信息。

====================================

GLuint glCreateProgram(	void);

创建程序对象。

描述

glCreateProgram 创建一个空的程序对象并返回一个非 0 值，通过该值可以引用该对象。
着色器对象可以关联到程序对象上，这就提供了一个机制来指定将要链接以创建一个程序的着色器对象。
它也提供了一种方法用来检查将被同来创建程序的着色器的兼容性（例如，检查顶点着色器和片段着色器
之间的兼容性）。当不再需要作为程序对象的一部分时，可以取消着色器对象和程序对象的关联。

通过使用 glAttachShader 成功的关联着色器对象，可以在程序对象中创建一个或多个可执行文件，使用
glCompileShader 成功的编译着色器对象，使用 glLinkProgram 成功的链接程序对象。当 glUseProgram
调用时，这些可执行文件成为当前状态的一部分。通过调用 glDeleteProgram 可以删除程序对象。和程序
对象关联的内存将被删除，当它不再作为一些上下文当前渲染状态一部分时。

注意：
同缓冲区和纹理对象一样，程序对象的命名空间可以在一组上下文间共享，只要上下文的服务端共享相同的
地址空间。如果命名空间在上下文间共享，一些关联的对象和数据同对象关联的也将共享。

当对象从不同的执行线程访问时，应用程序负责在 API 调用之间提供同步。 

如果在创建程序对象时发生错误，该函数返回 0。

====================================

void glAttachShader(GLuint program,
 	GLuint shader);

将着色器对象关联到程序对象。

`program`：指定着色器对象将要关联的程序对象；
`shader`：指定着色器对象；

[描述]
为了创建完整的着色器程序，必须有一种方式来指定将要链接在一起的东西，程序对象提供了这种机制。
链接到程序对象的着色器对象，必须首先关联到程序对象。glAttachShader 关联 `shader` 指定的着色
器对象到 `program` 指定的程序对象。这表明 `shader` 将参与链接操作，并且在 `program` 中执行。

不管着色器对象是否关联到程序对象，所有的在着色器对象上执行的操作有效。它允许关联着色器对象到
一个程序对象，在源代码被加载到着色器对象之前或者着色器对象编译之前。它不允许在相同的类型上关联
多个着色器对象。它允许关联一个着色器对象到多个程序对象。如果关联到一个程序对象的着色器对象被删
除，它将被标记为删除状态，删除直到 glDetachShader 被调用，来取消所有程序对象和它的关联；

====================================

void glLinkProgram(GLuint program);

链接程序对象。

`program`：指定将要被链接的程序对象的句柄。

描述

glLinkProgram 链接通过 `program` 指定的程序对象。和 `program` 关联的 GL_VERTEX_SHADER 类型的着色器对象
用来创建一个可执行文件，运行在可编程的顶点处理器；和 `program` 关联的 GL_FRAGMENT_SHADER 类型的着色器对
象用来创建一个可执行文件，它们运行在可编程的片段处理器。

链接操作的状态存储为程序对象的状态的一部分。如果程序对象在链接时没有错误并且准备使用，这个值将设置
为 GL_TRUE，否则设置为 GL_FALSE。可以通过调用 glGetProgramiv 的同时传递 `program` 和 GL_LINK_STATUS 参数
来查询状态。

如果链接操作成功，用户定义的属于 `program` 的所有 uniform 变量将初始化为 0，程序对象的每个 uniform 变量
将安排一个位置，可以通过调用 glGetUniformLocation 来查询。所有属于程序 uniform 块的 uniform 变量在
uniform 块中安排了一个偏移。还有，一些用户定义的属性变量，在尚未绑定到顶点属性的索引这时将绑定一个。

链接程序对象可能由于多种原因导致失败，这在 OpenGL ES Shading Language 规范中指定。下面列举了一些可能导致链接
错误的条件：
- 顶点着色器和片段着色器并没有同时存在于程序对象中；
- 顶点和片段着色器并没有使用相同的着色器语言版本；
- 超过了版本实现中支持的活动属性变量的数目；
- 超过了 uniform 变量的存储限制；
- 超过了版本实现中支持的活动 uniform 变量的数目；
- 缺少顶点或片段着色器的 main 函数；
- 片段着色器中使用的 varying 变量没有按照顶点着色器的方式声明（或者说没有声明）；
- 引用一个函数或变量的名字不能解析；
- 共享全局变量在声明的时候，使用两种不同的类型或者两个不同的初始化值；
- 一个或多个关联的着色器对象并没有成功编译（通过 glCompileShader）或使用一个预编译的二进制着色器加载（通过 glShaderBinary）；
- 绑定常用的属性矩阵，引发矩阵的某些行下降到允许最大 GL_MAX_VERTEX_ATTRIBS 数目之外；
- 没有找到足够连续的顶点属性槽，用来绑定属性矩阵；
- 在 `varyings` 数组中为 glTransformFeedbackVaryings  指定的变量名在顶点着色器中没有声明为输出；
- `varyings` 数组中的任何两项，指定了相同的 varying 变量；
- 变量数目
- 变量数目

当一个程序对象被成功链接后，通过调用 glUseProgram 程序对象可以作为当前状态的一部分。不管链接是否成功，程序对象的日志信息将
重新生成。可以通过调用 glGetProgramInfoLog 来获取信息日志。

glLinkProgram 将安装生成的可执行文件，作为当前渲染状态的一部分，如果链接操作成功并且制定的程序对象当前已经在使用，由于之前
调用 glUseProgram 函数。如果当前使用的程序对象在重新链接时没有成功，它的链接状态将设置为 GL_FALSE，但是可执行和关联的状态
将仍然维持当前状态的一部分，指导随后调用 glUseProgram 来移除对它的使用。在移除对它的使用之后，它不再是当前状态的一部分，直到
重新链接成功后。

程序对象的信息日志被更新，并且在链接的时候生成程序。在链接操作之后，应用程序可以自由的修改关联的着色器对象，编译关联的着色器
对象，取消和着色器对象的关联，删除着色器对象，和关联更多的着色器对象。这些操作都不会影响信息日志或者属于程序对象一部分的程序。 

注意：
如果链接操作不成功，一些关于之前链接操作的信息会丢失。某些信息仍然可以获取，即使在不成功的链接之后。

====================================

void glGetProgramiv(GLuint program,
 	GLenum pname,
 	GLint *params);


从程序对象返回一个参数。

`program`：指定需要被查询的程序对象；
`pname`：指定对象参数。可以接受如下的符号名：
`params`：返回查询的对象参数；

描述
glGetProgramiv 通过 `params` 返回指定程序对象的参数值。定义了下面的这些参数：

GL_INFO_LOG_LENGTH：
`params` 返回 `program` 信息日志中的字符个数，包括 null 结尾字符（例如，请求的缓冲区大小用来存放信息日志的字符个数）。
如果 `program` 没有信息日志，返回 0；

GL_LINK_STATUS：
如果对于 `program` 的最后链接操作成功，返回 GL_TRUE，否则返回 GL_FALSE；

====================================

void glGetProgramInfoLog(GLuint program,
 	GLsizei maxLength,
 	GLsizei *length,
 	GLchar *infoLog);

为程序对象返回信息日志。

`program`：指定程序对象，它的信息日志将被查询；
`maxLength`：指定字符缓冲区的大小，该缓冲区用来存放返回的信息日志；
`length`：存放返回的 `infoLog` 中的字符串长度（不包括 null 结尾字符）；
`infoLog`：指定一个字符数组，用来存放返回的信息日志；

描述
glGetProgramInfoLog 为指定的程序对象返回信息日志。当程序对象链接或验证时，
程序对象的信息日志会被修改。返回的字符串以 null 字符结尾；

glGetProgramInfoLog 在 infoLog 中返回尽量多的信息，直到达到 maxLength 字符数。
实际返回的字符数，不包括 null 结尾字符，在参数 `length` 中返回。如果不需要
返回字符串的长度，可以在 `length` 参数中惨地 NULL 值。用来存放返回日志信息的
缓冲区大小可以通过调用 glGetProgramiv 时，传递 GL_INFO_LOG_LENGTH 参数来获得。

程序对象的信息日志是可能是一个空的字符串，或者是一个字符串包含最后链接操作的信息，
或者是一个字符串包含最后验证操作的信息。它可能包含诊断信息，警告信息或其它信息。
当创建一个程序对象时，它的信息日志的字符串长度为 0；

注意
程序对象的信息日志，是 OpenGL 实现的主要机制，用来传输关于链接和验证的信息。
因此，信息日志在开发过程中，对于应用开发人员来说可能非常有用，即使当这些操作
已经执行成功时。应用开发人员不应期待对于不同的 OpenGL 实现来说产生相同的信息日志。





































